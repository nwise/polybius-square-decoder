require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DecodingsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Decoding. As you add validations to Decoding, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { encoded: "54-21-45" }
  }

  let(:invalid_attributes) {
    { encoded: "bogus" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DecodingsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all decodings as @decodings" do
      decoding = Decoding.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:decodings)).to eq([decoding])
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Decoding" do
        expect {
          post :create, { decoding: valid_attributes, format: :json }, valid_session
        }.to change(Decoding, :count).by(1)
      end

      it "assigns a newly created decoding as @decoding" do
        post :create, { decoding: valid_attributes, format: :json }, valid_session
        expect(assigns(:decoding)).to be_a(Decoding)
        expect(assigns(:decoding)).to be_persisted
      end

      it "returns a JSON representation of the record" do
        post :create, { decoding: valid_attributes, format: :json }, valid_session
        expect(response.code).to eq("200")
        expect(JSON.parse(response.body).keys).to include("id", "plain", "encoded", "created_at", "updated_at")
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved decoding as @decoding" do
        post :create, { decoding: invalid_attributes, format: :json }, valid_session
        expect(assigns(:decoding)).to be_a_new(Decoding)
      end

      it "returns a 422 with error message" do
        post :create, { decoding: invalid_attributes, format: :json}, valid_session
        expect(response.code).to eq("422")
        expect(JSON.parse response.body).to eq({ "plain" => ["String could not be decoded"] })
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested decoding" do
      decoding = Decoding.create! valid_attributes
      expect {
        delete :destroy, { id: decoding.to_param, format: :json }, valid_session
      }.to change(Decoding, :count).by(-1)
    end

    it "returns a 204" do
      decoding = Decoding.create! valid_attributes
      delete :destroy, { id: decoding.to_param, format: :json}, valid_session
      expect(response.code).to eq("204")
      expect(response.body).to eq("")
    end
  end

end
